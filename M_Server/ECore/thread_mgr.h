//-------------------------------------------------------------------------------------
// File: thread_mgr.h
// Desc: 线程管理器，它负责所有线程的创建和删除，并提供查询功能
// Auth: Aslan
// Date: 2009-12-09
// Last: 2009-12-09
//-------------------------------------------------------------------------------------
#pragma once

#include "mutex.h"

namespace ECore{

class Thread;
class Executor;
//-------------------------------------------------------------------------------------
// 线程管理器
//-------------------------------------------------------------------------------------
class ECORE_API ThreadMgr
{
public:
	//---------------------------------------------------------------------------------
	// 构造和析构
	//---------------------------------------------------------------------------------
	ThreadMgr();
	~ThreadMgr() {}

	//---------------------------------------------------------------------------------
	// 关闭线程池
	//---------------------------------------------------------------------------------
	VOID	ShutDown();

	//---------------------------------------------------------------------------------
	// 创建线程，返回线程池分配的线程ID，如果创建失败，返回GT_INVALD
	//---------------------------------------------------------------------------------
	DWORD	CreateThread(Executor* pExecutor, BOOL bDestroyAtEnd, BOOL bInitSuspend=FALSE);

	//---------------------------------------------------------------------------------
	// 停止一个线程
	//---------------------------------------------------------------------------------
	VOID	StopThread(DWORD dwID, BOOL bWait=TRUE);

	//---------------------------------------------------------------------------------
	// 某个线程停止，用于线程函数结束后调用，外部不要调用
	//---------------------------------------------------------------------------------
	VOID	ThreadStopped(DWORD dwID);

	//---------------------------------------------------------------------------------
	// 挂起一个线程和恢复一个线程
	//---------------------------------------------------------------------------------
	VOID	SuspendOneThread(DWORD dwID);
	VOID	ResumeOneThread(DWORD dwID);

	//---------------------------------------------------------------------------------
	// 得到一个线程的系统分配ID
	//---------------------------------------------------------------------------------
	DWORD	GetOneThreadSystemID(DWORD dwID);
	
	//---------------------------------------------------------------------------------
	// 得到所有线程的系统分配ID
	//---------------------------------------------------------------------------------
	VOID	GetAlThreadSystemID(TList<DWORD>& listID);

	//---------------------------------------------------------------------------------
	// 查询某个线程是否存在
	//---------------------------------------------------------------------------------
	BOOL	IsThreadActive(DWORD dwID);

private:
	ThreadMgr(const ThreadMgr&);
	const ThreadMgr& operator=(const ThreadMgr&);

	//---------------------------------------------------------------------------------
	// 等待线程关闭并删除
	//---------------------------------------------------------------------------------
	VOID	WaitAndDestroyThread(Thread* pThread);

private:
	Mutex						m_Mutex;			// 创建，查询和删除都需要的一个锁定
	DWORD volatile				m_dwIDGen;			// 线程ID生成器
	TMap<DWORD, Thread*>		m_mapThread;		// 线程容器
};

} // namespace ECore{