//-----------------------------------------------------------------------------
// File: executor_task.h
// Desc: 基于任务的线程执行体，该执行体与某个初始化好的完成端口绑定，进行Run的时候
//       任务执行体等待完成端口的完成通知，并将该通知解释为某个任务来进行执行，然后
//       继续等待，直到得到返回的完成通知即可
// Auth: Aslan
// Date: 2009-12-09
// Last: 2009-12-09
//-----------------------------------------------------------------------------
#pragma once

#include "executor.h"

namespace ECore{

class TaskScheduler;
//-----------------------------------------------------------------------------
// 基于对象的线程执行体
//-----------------------------------------------------------------------------
class ECORE_API ExecutorTask : public Executor
{
public:
	ExecutorTask(HANDLE hCompletionPort, TaskScheduler* pScheduler, LPVOID nIndex);
	virtual ~ExecutorTask();

	//-------------------------------------------------------------------------
	// 执行接口，这个接口是自己实现
	//-------------------------------------------------------------------------
	virtual VOID	Run();

	//-------------------------------------------------------------------------
	// 提供关闭线程时的回调接口，这个接口不实现，需要外部来通过完成端口通知得到结束通知
	//-------------------------------------------------------------------------
	virtual VOID	OnShutDown();

private:
	HANDLE			m_hCompletionPort;		// 从外部获取的某个完成端口句柄
	TaskScheduler*	m_pScheduler;			// 任务调度器，以便完成一个任务时通知
};

} // namespace ECore{